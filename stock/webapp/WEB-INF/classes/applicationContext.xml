<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	default-autowire="byName" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="  
       http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
       http://www.springframework.org/schema/tx   
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd  
       http://www.springframework.org/schema/aop   
       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
       http://www.springframework.org/schema/context  
       http://www.springframework.org/schema/context/spring-context-3.2.xsd"
       default-lazy-init="true">
	<!-- 配置dbcp连接的配置文件-->
	<context:property-placeholder location="classpath:jdbc.properties" /> 
	<context:component-scan base-package="cn.com.huitong.*"/>
	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="${initialSize}" />
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="${maxActive}" />
       	<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
        <property name="maxIdle" value="${maxIdle}" />
        <!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
        <property name="minIdle" value="${minIdle}" />
	</bean>
	<!-- 配置数据库工厂  -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 第一种  使用hibernate文件配置
		<property name="configLocation" value="classpath:hibernate.cfg.xml" /> -->
		<!-- 第二种 使用dbcp配置 -->
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
		<props>
			<prop key="hibernate.dialalect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
			<prop key="hibernate.show_sql">true</prop>
			<prop key="hibernate.format_sql">true</prop>
			<prop key="hibernate.jdbc.fetch_size">50</prop>
			<prop key="hibernate.jdbc.batch_size">25</prop>
			<prop key="hibernate.temp.user_jdbc_metadate_dafaults">false</prop>
			<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
			<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
			<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
			<prop key="jdbc.user_scrollable_resultset">false</prop>
			<!-- 开启二级缓存 -->
			<prop key="hibernate.cache.use_second_level_cache">true</prop>
            <prop key="hibernate.cache.use_query_cache">true</prop>
		</props>
		</property>
		<!-- 写入具体需要持久化的类 -->
		<property name="annotatedClasses">
			<list>
				<value>cn.com.huitong.model.Grade</value>
				<value>cn.com.huitong.model.AppUser</value>
				<value>cn.com.huitong.model.Stock</value>
				<value>cn.com.huitong.model.Information</value>
			</list>
		</property>
	</bean>
	<!-- 事务管理   下面使用AOP配置事务管理  -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!--  配置事务传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- <tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" /> -->
			<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="get*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="apply*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="list*" read-only="true" propagation="REQUIRED" />
			<tx:method name="query*" read-only="true" propagation="REQUIRED" />
			<tx:method name="load*" read-only="true" propagation="REQUIRED" />
			<tx:method name="check*" read-only="true" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!--  配置参与事务的类 -->
	<aop:config>
		<aop:pointcut id="allServiceMethod"
			expression="execution(* cn.com.huitong.service.impl.*.*(..))"  />
		<aop:pointcut id="coreServiceMethod" expression="execution(* cn.com.huitong.core.*.impl.*.*(..))"/>
		<aop:advisor pointcut-ref="allServiceMethod" advice-ref="txAdvice" />
		<aop:advisor pointcut-ref="coreServiceMethod" advice-ref="txAdvice" />
	</aop:config>
	<!-- 注解事务配置   -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
	<!--
		PROPAGATION_REQUIRED-支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
		PROPAGATION_SUPPORTS-支持当前事务，如果当前没有事务，就以非事务方式执行。
		PROPAGATION_MANDATORY-支持当前事务，如果当前没有事务，就抛出异常。
		PROPAGATION_REQUIRES_NEW-新建事务，如果当前存在事务，把当前事务挂起。
		PROPAGATION_NOT_SUPPORTED-以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
		PROPAGATION_NEVER-以非事务方式执行，如果当前存在事务，则抛出异常。
		PROPAGATION_NESTED-如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。
	-->
	<!-- Spring AOP config 
		解释一下(* com.evan.crm.service.*.*(..))中几个通配符的含义：
		第一个 * —— 通配 任意返回值类型
		第二个 * —— 通配 包com.evan.crm.service下的任意class
		第三个 * —— 通配 包com.evan.crm.service下的任意class的任意方法
		第四个 .. —— 通配 方法可以有0个或多个参数
	-->
	<!-- 配置service 
	<bean id="studentService" class="com.huitong.service.impl.StudentServiceSpringImpl"
		scope="prototype">
	</bean>-->
	<!-- 配置anction 
	<bean id="loginAction" class="com.huitong.action.LoginAction"
		scope="prototype" />-->
	<import resource="spring/app-action.xml"/>
	<import resource="spring/app-service.xml"/>
</beans> 